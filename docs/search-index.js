var N=null,E="",T="t",U="u",searchIndex={};
var R=["lockresult","mutexguard","into_inner","rwlockreadguard","trylockresult","rwlockwriteguard","is_poisoned","get_mut","Returns a mutable reference to the underlying data.","result","try_from","try_into","borrow_mut","type_id","to_string","borrow","typeid","deref_mut","formatter","MutexGuard","RwLockReadGuard","RwLockWriteGuard"];

searchIndex["spin_sync"]={"doc":"CircleCI Build Status","i":[[3,"Mutex","spin_sync","A mutual exclusion primitive useful for protecting shared…",N,N],[3,R[19],E,"An RAII implementation of a \"scoped lock\" of a mutex.",N,N],[3,"RwLock",E,"A reader-writer lock.",N,N],[3,R[20],E,"An RAII implementation of a \"scoped shared read lock\" of a…",N,N],[3,R[21],E,"An RAII implementation of a \"scoped exclusive write lock\"…",N,N],[11,"new",E,"Creates a new mutex in an unlocked state ready for use. #…",0,[[[T]],["self"]]],[11,R[2],E,"Consumes this mutex and returns the underlying data.",0,[[],[R[0]]]],[11,"lock",E,"Blocks the current thread until acquiring the lock, and…",0,[[["self"]],[[R[1]],[R[0],[R[1]]]]]],[11,"try_lock",E,"Attempts to acquire this lock and returns an RAII guard…",0,[[["self"]],[[R[4],[R[1]]],[R[1]]]]],[11,R[6],E,"Determines whether the mutex is poisoned or not.",0,[[["self"]],["bool"]]],[11,R[7],E,R[8],0,[[["self"]],[[R[0]],[T]]]],[11,"new",E,"Creates a new instance in unlocked state ready for use.",1,[[[T]],["self"]]],[11,R[2],E,"Consumes this instance and returns the underlying data.",1,[[],[R[0]]]],[18,"MAX_READ_LOCK_COUNT",E,"The maximum shared read locks of each instance.",1,N],[11,"read",E,"Blocks the current thread until acquiring a shared read…",1,[[["self"]],[[R[3]],[R[0],[R[3]]]]]],[11,"try_read",E,"Attempts to acquire a shared read lock and returns an RAII…",1,[[["self"]],[[R[4],[R[3]]],[R[3]]]]],[11,"try_write",E,"Attempts to acquire the exclusive write lock and returns…",1,[[["self"]],[[R[4],[R[5]]],[R[5]]]]],[11,"write",E,"Blocks the current thread until acquiring the exclusive…",1,[[["self"]],[[R[5]],[R[0],[R[5]]]]]],[11,R[6],E,"Determines whether the lock is poisoned or not.",1,[[["self"]],["bool"]]],[11,R[7],E,R[8],1,[[["self"]],[[R[0]],[T]]]],[6,"LockResult",E,"Alias to std::sync::LockResult.",N,N],[6,"PoisonError",E,"Alias to std::sync::PoisonError",N,N],[6,"TryLockError",E,"Alias to std::sync::TryLockError",N,N],[6,"TryLockResult",E,"Alias to std::sync::TryLockResult",N,N],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[10],E,E,0,[[[U]],[R[9]]]],[11,R[11],E,E,0,[[],[R[9]]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[15],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"]],[R[16]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[14],E,E,2,[[["self"]],["string"]]],[11,R[10],E,E,2,[[[U]],[R[9]]]],[11,R[11],E,E,2,[[],[R[9]]]],[11,R[12],E,E,2,[[["self"]],[T]]],[11,R[15],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"]],[R[16]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[10],E,E,1,[[[U]],[R[9]]]],[11,R[11],E,E,1,[[],[R[9]]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[["self"]],[R[16]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[14],E,E,3,[[["self"]],["string"]]],[11,R[10],E,E,3,[[[U]],[R[9]]]],[11,R[11],E,E,3,[[],[R[9]]]],[11,R[12],E,E,3,[[["self"]],[T]]],[11,R[15],E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[["self"]],[R[16]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[14],E,E,4,[[["self"]],["string"]]],[11,R[10],E,E,4,[[[U]],[R[9]]]],[11,R[11],E,E,4,[[],[R[9]]]],[11,R[12],E,E,4,[[["self"]],[T]]],[11,R[15],E,E,4,[[["self"]],[T]]],[11,R[13],E,E,4,[[["self"]],[R[16]]]],[11,"drop",E,E,2,[[["self"]]]],[11,"drop",E,"Make sure to release the shared read lock. This function…",3,[[["self"]]]],[11,"drop",E,"Make sure to release the exclusive write lock.",4,[[["self"]]]],[11,"default",E,E,0,[[],["self"]]],[11,"default",E,E,1,[[],["self"]]],[11,"from",E,E,0,[[[T]],["self"]]],[11,"from",E,E,1,[[[T]],["self"]]],[11,R[17],E,E,2,[[["self"]]]],[11,R[17],E,E,4,[[["self"]]]],[11,"deref",E,E,2,[[["self"]]]],[11,"deref",E,E,3,[[["self"]]]],[11,"deref",E,E,4,[[["self"]]]],[11,"fmt",E,E,0,[[["self"],[R[18]]],[R[9]]]],[11,"fmt",E,E,2,[[["self"],[R[18]]],[R[9]]]],[11,"fmt",E,E,1,[[["self"],[R[18]]],[R[9]]]],[11,"fmt",E,E,3,[[["self"],[R[18]]],[R[9]]]],[11,"fmt",E,E,4,[[["self"],[R[18]]],[R[9]]]],[11,"fmt",E,E,2,[[["self"],[R[18]]],[R[9]]]],[11,"fmt",E,E,3,[[["self"],[R[18]]],[R[9]]]],[11,"fmt",E,E,4,[[["self"],[R[18]]],[R[9]]]]],"p":[[3,"Mutex"],[3,"RwLock"],[3,R[19]],[3,R[20]],[3,R[21]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);