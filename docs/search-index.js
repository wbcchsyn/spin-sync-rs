var N=null,E="",T="t",U="u",searchIndex={};
var R=["lockresult","mutexguard","result","try_from","try_into","borrow_mut","borrow","type_id","typeid","MutexGuard","formatter","to_string","description","poisonerror","into_inner","Reaches into this error indicating that a lock is…","TryLockError","PoisonError","RwLockReadGuard","RwLockWriteGuard","rwlockreadguard","trylockresult","rwlockwriteguard","is_poisoned","Returns a mutable reference to the underlying data.","deref_mut"];
searchIndex["spin_sync"]={"doc":"CircleCI Build Status","i":[[3,"Mutex","spin_sync","A mutual exclusion primitive useful for protecting shared…",N,N],[3,R[9],E,"An RAII implementation of a \"scoped lock\" of a mutex.",N,N],[3,"RwLock",E,"A reader-writer lock",N,N],[3,R[18],E,"RAII structure used to release the shared read access of a…",N,N],[3,R[19],E,"RAII structure used to release the exclusive write access…",N,N],[11,"new",E,"Creates a new mutex in an unlocked state ready for use.",0,[[[T]],["self"]]],[11,R[14],E,"Consumes this mutex and returns the underlying data.",0,[[],[R[0]]]],[11,"lock",E,"Acquires a mutex, blocking the current thread until it is…",0,[[["self"]],[[R[0],[R[1]]],[R[1]]]]],[11,"try_lock",E,"Attempt to acquire this lock.",0,[[["self"]],[[R[1]],[R[21],[R[1]]]]]],[11,R[23],E,"Determin whether the mutex is poisoned or not.",0,[[["self"]],["bool"]]],[11,"get_mut",E,R[24],0,[[["self"]],[[T],[R[0]]]]],[11,"new",E,E,1,[[[T]],["self"]]],[11,R[14],E,"Consumes this `RwLock`, returning the underlying data.",1,[[],[R[0]]]],[11,"read",E,"Locks this rwlock with shared read access, blocking the…",1,[[["self"]],[[R[0],[R[20]]],[R[20]]]]],[11,"try_read",E,"Attempts to acquire this rwlock with shared read access.",1,[[["self"]],[[R[20]],[R[21],[R[20]]]]]],[11,"try_write",E,"Attempts to lock this rwlock with exclusive write access.",1,[[["self"]],[[R[21],[R[22]]],[R[22]]]]],[11,"write",E,"Locks this rwlock with exclusive write access, blocking…",1,[[["self"]],[[R[0],[R[22]]],[R[22]]]]],[11,R[23],E,"Determin whether the lock is poisoned or not.",1,[[["self"]],["bool"]]],[11,"get_mut",E,R[24],1,[[["self"]],[[T],[R[0]]]]],[6,"LockResult",E,"Alias to std::sync::LockResult.",N,N],[6,R[17],E,"Alias to std::sync::PoisonError",N,N],[6,R[16],E,"Alias to std::sync::TryLockError",N,N],[6,"TryLockResult",E,"Alias to std::sync::TryLockResult",N,N],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[],[T]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[11],E,E,2,[[["self"]],["string"]]],[11,R[3],E,E,2,[[[U]],[R[2]]]],[11,R[4],E,E,2,[[],[R[2]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[],[T]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[11],E,E,3,[[["self"]],["string"]]],[11,R[3],E,E,3,[[[U]],[R[2]]]],[11,R[4],E,E,3,[[],[R[2]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[11],E,E,4,[[["self"]],["string"]]],[11,R[3],E,E,4,[[[U]],[R[2]]]],[11,R[4],E,E,4,[[],[R[2]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,"drop",E,E,2,[[["self"]]]],[11,"drop",E,"Make sure to release the shared read lock. This function…",3,[[["self"]]]],[11,"drop",E,"Make sure to release the exclusive write lock.",4,[[["self"]]]],[11,"from",E,E,0,[[[T]],["self"]]],[11,"from",E,E,1,[[[T]],["self"]]],[11,"default",E,E,0,[[],["self"]]],[11,"default",E,E,1,[[],["self"]]],[11,"fmt",E,E,2,[[[R[10]],["self"]],[R[2]]]],[11,"fmt",E,E,3,[[[R[10]],["self"]],[R[2]]]],[11,"fmt",E,E,4,[[[R[10]],["self"]],[R[2]]]],[11,"fmt",E,E,0,[[[R[10]],["self"]],[R[2]]]],[11,"fmt",E,E,2,[[[R[10]],["self"]],[R[2]]]],[11,"fmt",E,E,1,[[[R[10]],["self"]],[R[2]]]],[11,"fmt",E,E,3,[[[R[10]],["self"]],[R[2]]]],[11,"fmt",E,E,4,[[[R[10]],["self"]],[R[2]]]],[11,"deref",E,E,2,[[["self"]]]],[11,"deref",E,E,3,[[["self"]]]],[11,"deref",E,E,4,[[["self"]]]],[11,R[25],E,E,2,[[["self"]]]],[11,R[25],E,E,4,[[["self"]]]]],"p":[[3,"Mutex"],[3,"RwLock"],[3,R[9]],[3,R[18]],[3,R[19]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);